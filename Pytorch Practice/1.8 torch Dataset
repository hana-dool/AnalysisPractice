{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO/8zrDIcbHoVksXZMKmSv5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tO69CXPcWbOj","executionInfo":{"status":"ok","timestamp":1669726247346,"user_tz":-540,"elapsed":32498,"user":{"displayName":"rany go","userId":"15846384859939162308"}},"outputId":"13bd6276-ef1a-47b7-d6a9-9c6a1ce90878"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["import torch\n","from torch import nn\n","from torch.nn import functional as F\n","import torch.utils.data as Data\n","from torch import optim\n","from sklearn import datasets\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import r2_score\n","from sklearn.model_selection import train_test_split\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from matplotlib import pyplot as plt\n","\n","# 토치 랜덤 고정 \n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["# digit classification MLP"],"metadata":{"id":"Qcyx8knm9Lk5"}},{"cell_type":"code","source":["boston = datasets.load_boston()\n","X, y = boston.data, boston.target\n","X = X.astype(np.float32)\n","y = y.astype(np.float32)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1) \n","n_samples, n_features = X.shape ; \n","pd.DataFrame(boston['data'],columns =boston['feature_names'] )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"-cpySWkXicSl","executionInfo":{"status":"ok","timestamp":1669543543735,"user_tz":-540,"elapsed":4,"user":{"displayName":"rany go","userId":"15846384859939162308"}},"outputId":"7fd35a3b-9da2-49d5-96be-97860eee082f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function load_boston is deprecated; `load_boston` is deprecated in 1.0 and will be removed in 1.2.\n","\n","    The Boston housing prices dataset has an ethical problem. You can refer to\n","    the documentation of this function for further details.\n","\n","    The scikit-learn maintainers therefore strongly discourage the use of this\n","    dataset unless the purpose of the code is to study and educate about\n","    ethical issues in data science and machine learning.\n","\n","    In this special case, you can fetch the dataset from the original\n","    source::\n","\n","        import pandas as pd\n","        import numpy as np\n","\n","\n","        data_url = \"http://lib.stat.cmu.edu/datasets/boston\"\n","        raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n","        data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\n","        target = raw_df.values[1::2, 2]\n","\n","    Alternative datasets include the California housing dataset (i.e.\n","    :func:`~sklearn.datasets.fetch_california_housing`) and the Ames housing\n","    dataset. You can load the datasets as follows::\n","\n","        from sklearn.datasets import fetch_california_housing\n","        housing = fetch_california_housing()\n","\n","    for the California housing dataset and::\n","\n","        from sklearn.datasets import fetch_openml\n","        housing = fetch_openml(name=\"house_prices\", as_frame=True)\n","\n","    for the Ames housing dataset.\n","    \n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["        CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n","0    0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   \n","1    0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   \n","2    0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   \n","3    0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   \n","4    0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0   \n","..       ...   ...    ...   ...    ...    ...   ...     ...  ...    ...   \n","501  0.06263   0.0  11.93   0.0  0.573  6.593  69.1  2.4786  1.0  273.0   \n","502  0.04527   0.0  11.93   0.0  0.573  6.120  76.7  2.2875  1.0  273.0   \n","503  0.06076   0.0  11.93   0.0  0.573  6.976  91.0  2.1675  1.0  273.0   \n","504  0.10959   0.0  11.93   0.0  0.573  6.794  89.3  2.3889  1.0  273.0   \n","505  0.04741   0.0  11.93   0.0  0.573  6.030  80.8  2.5050  1.0  273.0   \n","\n","     PTRATIO       B  LSTAT  \n","0       15.3  396.90   4.98  \n","1       17.8  396.90   9.14  \n","2       17.8  392.83   4.03  \n","3       18.7  394.63   2.94  \n","4       18.7  396.90   5.33  \n","..       ...     ...    ...  \n","501     21.0  391.99   9.67  \n","502     21.0  396.90   9.08  \n","503     21.0  396.90   5.64  \n","504     21.0  393.45   6.48  \n","505     21.0  396.90   7.88  \n","\n","[506 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-b462c485-85e8-47fb-96ef-9e3d17e1b60d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CRIM</th>\n","      <th>ZN</th>\n","      <th>INDUS</th>\n","      <th>CHAS</th>\n","      <th>NOX</th>\n","      <th>RM</th>\n","      <th>AGE</th>\n","      <th>DIS</th>\n","      <th>RAD</th>\n","      <th>TAX</th>\n","      <th>PTRATIO</th>\n","      <th>B</th>\n","      <th>LSTAT</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.00632</td>\n","      <td>18.0</td>\n","      <td>2.31</td>\n","      <td>0.0</td>\n","      <td>0.538</td>\n","      <td>6.575</td>\n","      <td>65.2</td>\n","      <td>4.0900</td>\n","      <td>1.0</td>\n","      <td>296.0</td>\n","      <td>15.3</td>\n","      <td>396.90</td>\n","      <td>4.98</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.02731</td>\n","      <td>0.0</td>\n","      <td>7.07</td>\n","      <td>0.0</td>\n","      <td>0.469</td>\n","      <td>6.421</td>\n","      <td>78.9</td>\n","      <td>4.9671</td>\n","      <td>2.0</td>\n","      <td>242.0</td>\n","      <td>17.8</td>\n","      <td>396.90</td>\n","      <td>9.14</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.02729</td>\n","      <td>0.0</td>\n","      <td>7.07</td>\n","      <td>0.0</td>\n","      <td>0.469</td>\n","      <td>7.185</td>\n","      <td>61.1</td>\n","      <td>4.9671</td>\n","      <td>2.0</td>\n","      <td>242.0</td>\n","      <td>17.8</td>\n","      <td>392.83</td>\n","      <td>4.03</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.03237</td>\n","      <td>0.0</td>\n","      <td>2.18</td>\n","      <td>0.0</td>\n","      <td>0.458</td>\n","      <td>6.998</td>\n","      <td>45.8</td>\n","      <td>6.0622</td>\n","      <td>3.0</td>\n","      <td>222.0</td>\n","      <td>18.7</td>\n","      <td>394.63</td>\n","      <td>2.94</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.06905</td>\n","      <td>0.0</td>\n","      <td>2.18</td>\n","      <td>0.0</td>\n","      <td>0.458</td>\n","      <td>7.147</td>\n","      <td>54.2</td>\n","      <td>6.0622</td>\n","      <td>3.0</td>\n","      <td>222.0</td>\n","      <td>18.7</td>\n","      <td>396.90</td>\n","      <td>5.33</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>501</th>\n","      <td>0.06263</td>\n","      <td>0.0</td>\n","      <td>11.93</td>\n","      <td>0.0</td>\n","      <td>0.573</td>\n","      <td>6.593</td>\n","      <td>69.1</td>\n","      <td>2.4786</td>\n","      <td>1.0</td>\n","      <td>273.0</td>\n","      <td>21.0</td>\n","      <td>391.99</td>\n","      <td>9.67</td>\n","    </tr>\n","    <tr>\n","      <th>502</th>\n","      <td>0.04527</td>\n","      <td>0.0</td>\n","      <td>11.93</td>\n","      <td>0.0</td>\n","      <td>0.573</td>\n","      <td>6.120</td>\n","      <td>76.7</td>\n","      <td>2.2875</td>\n","      <td>1.0</td>\n","      <td>273.0</td>\n","      <td>21.0</td>\n","      <td>396.90</td>\n","      <td>9.08</td>\n","    </tr>\n","    <tr>\n","      <th>503</th>\n","      <td>0.06076</td>\n","      <td>0.0</td>\n","      <td>11.93</td>\n","      <td>0.0</td>\n","      <td>0.573</td>\n","      <td>6.976</td>\n","      <td>91.0</td>\n","      <td>2.1675</td>\n","      <td>1.0</td>\n","      <td>273.0</td>\n","      <td>21.0</td>\n","      <td>396.90</td>\n","      <td>5.64</td>\n","    </tr>\n","    <tr>\n","      <th>504</th>\n","      <td>0.10959</td>\n","      <td>0.0</td>\n","      <td>11.93</td>\n","      <td>0.0</td>\n","      <td>0.573</td>\n","      <td>6.794</td>\n","      <td>89.3</td>\n","      <td>2.3889</td>\n","      <td>1.0</td>\n","      <td>273.0</td>\n","      <td>21.0</td>\n","      <td>393.45</td>\n","      <td>6.48</td>\n","    </tr>\n","    <tr>\n","      <th>505</th>\n","      <td>0.04741</td>\n","      <td>0.0</td>\n","      <td>11.93</td>\n","      <td>0.0</td>\n","      <td>0.573</td>\n","      <td>6.030</td>\n","      <td>80.8</td>\n","      <td>2.5050</td>\n","      <td>1.0</td>\n","      <td>273.0</td>\n","      <td>21.0</td>\n","      <td>396.90</td>\n","      <td>7.88</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>506 rows × 13 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b462c485-85e8-47fb-96ef-9e3d17e1b60d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b462c485-85e8-47fb-96ef-9e3d17e1b60d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b462c485-85e8-47fb-96ef-9e3d17e1b60d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler"],"metadata":{"id":"PTDMIup1mJIS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["torch.tensor(X,dtype = torch.float64)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nj4zFzhZn5RK","executionInfo":{"status":"ok","timestamp":1669544804287,"user_tz":-540,"elapsed":269,"user":{"displayName":"rany go","userId":"15846384859939162308"}},"outputId":"a69209d7-4ffc-440b-fd1b-4d9c1e08b6a4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[6.3200e-03, 1.8000e+01, 2.3100e+00,  ..., 1.5300e+01, 3.9690e+02,\n","         4.9800e+00],\n","        [2.7310e-02, 0.0000e+00, 7.0700e+00,  ..., 1.7800e+01, 3.9690e+02,\n","         9.1400e+00],\n","        [2.7290e-02, 0.0000e+00, 7.0700e+00,  ..., 1.7800e+01, 3.9283e+02,\n","         4.0300e+00],\n","        ...,\n","        [6.0760e-02, 0.0000e+00, 1.1930e+01,  ..., 2.1000e+01, 3.9690e+02,\n","         5.6400e+00],\n","        [1.0959e-01, 0.0000e+00, 1.1930e+01,  ..., 2.1000e+01, 3.9345e+02,\n","         6.4800e+00],\n","        [4.7410e-02, 0.0000e+00, 1.1930e+01,  ..., 2.1000e+01, 3.9690e+02,\n","         7.8800e+00]], dtype=torch.float64)"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["class CustomDataSet(Data.Dataset):\n","    def __init__(self, X, y):\n","        # 우선 X Festure 에 대해서 Standard - Scaler 부터 적용한다.\n","        scaler = StandardScaler()\n","        X_trns = scaler.fit_transform(X.astype(np.float32))\n","        y_trns = y.astype(np.float32)\n","        self.X = torch.tensor(X_trns)\n","        self.y = torch.tensor(y_trns)\n","    \n","    def __getitem__(self, index):\n","        return self.X[index, :], self.y[index]\n","\n","    def __len__(self):\n","        return len(self.y)"],"metadata":{"id":"XiLf1ZiTjBaT","executionInfo":{"status":"ok","timestamp":1669726254388,"user_tz":-540,"elapsed":263,"user":{"displayName":"rany go","userId":"15846384859939162308"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["from torch.nn import functional as F"],"metadata":{"id":"BLrTq5oO15lY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Model(nn.Module):\n","    def __init__(self, n_features, hiddenA, hiddenB):\n","        super(Model, self).__init__()\n","        self.linearA = nn.Linear(n_features, hiddenA)\n","        self.linearB = nn.Linear(hiddenA, hiddenB)\n","        self.linearC = nn.Linear(hiddenB, 1)\n","\n","    def forward(self, x):\n","        yA = F.relu(self.linearA(x))\n","        yB = F.relu(self.linearB(yA))\n","        return self.linearC(yB)"],"metadata":{"id":"sx_rUc2YnBxa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["net = Model(n_features, 100, 50)"],"metadata":{"id":"YTKi4I-Mnbd9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_set = CustomDataSet(X_train, y_train)\n","test_set = CustomDataSet(X_test, y_test)"],"metadata":{"id":"ddSawHtrnek_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.datasets import load_digits\n","digits = load_digits()"],"metadata":{"id":"jAeg9s2xH5Ws"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = digits.data \n","y = digits.target"],"metadata":{"id":"lxEPpUdMIClo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = torch.tensor(digits.data,dtype = torch.float32)\n","y = torch.tensor(digits.target, dtype = torch.int64)"],"metadata":{"id":"QKj_tqGvIGZ-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lossfn = nn.CrossEntropyLoss()"],"metadata":{"id":"iqfjLfuDISkt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["optimizer = torch.optim.SGD(net.parameters(),lr = 0.01)"],"metadata":{"id":"xzMdyzAOIaZp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["losses = [] \n","for epoch in range(100) : \n","    pred = net(X)\n","    loss = lossfn(pred,y)\n","    loss.backward()\n","    # 가중치 업데이트\n","    optimizer.step()\n","    \n","    # gradient 초기화\n","    optimizer.zero_grad()\n","\n","    # loss 업데이트 \n","    losses.append(loss.item())"],"metadata":{"id":"NqCSFZUPI20z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from matplotlib import pyplot as plt\n","plt.plot(losses)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"7uN2OAuNI1pU","executionInfo":{"status":"ok","timestamp":1669537838788,"user_tz":-540,"elapsed":688,"user":{"displayName":"rany go","userId":"15846384859939162308"}},"outputId":"3c36e5a2-6998-422e-c420-68af1c4759c0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fa644886810>]"]},"metadata":{},"execution_count":26},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["X = iris.data[:100]\n","y = iris.target[:100]"],"metadata":{"id":"mk1lZ_fu3vLS","executionInfo":{"status":"error","timestamp":1669536390978,"user_tz":-540,"elapsed":5,"user":{"displayName":"rany go","userId":"15846384859939162308"}},"colab":{"base_uri":"https://localhost:8080/","height":188},"outputId":"04c18b2b-1e86-4afc-81c3-255857156664"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-84ce68edff2f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0miris\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0miris\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'iris' is not defined"]}]},{"cell_type":"code","source":["X = torch.tensor(X, dtype = torch.float32)\n","y = torch.tensor(y, dtype = torch.float32)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZP3HSgQs3zPK","executionInfo":{"status":"ok","timestamp":1669481865441,"user_tz":-540,"elapsed":3,"user":{"displayName":"rany go","userId":"15846384859939162308"}},"outputId":"96d8f3f7-3b7b-4f6f-96a0-787eb549df19"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  \"\"\"Entry point for launching an IPython kernel.\n"]}]},{"cell_type":"code","source":["net = nn.Linear(4,1)\n","loss_fn = nn.BCEWithLogitsLoss()\n","optimizer = optim.SGD(net.parameters(), lr = 0.25)\n","losses = []\n","for epoch in range(100): \n","    pred = net(X) \n","    loss = loss_fn(pred.view_as(y),y)\n","    loss.backward()\n","    optimizer.step()\n","    optimizer.zero_grad()\n","    losses.append(loss.item())\n","\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","plt.plot(losses)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"5f7PwKLx38Cl","executionInfo":{"status":"ok","timestamp":1669483092049,"user_tz":-540,"elapsed":464,"user":{"displayName":"rany go","userId":"15846384859939162308"}},"outputId":"3c219d7b-2e6a-4639-aa7f-bd6d19259d7b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f62be1780d0>]"]},"metadata":{},"execution_count":12},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# digit datast"],"metadata":{"id":"Q89mH__H9xmK"}},{"cell_type":"code","source":["from sklearn.datasets import load_digits"],"metadata":{"id":"zuhJM69n9zgm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["digit = load_digits()"],"metadata":{"id":"IqntztCj950m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x = digit.data\n","y = digit.target"],"metadata":{"id":"8kxXvvSG98bw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x = torch.tensor(x,dtype = torch.float32)\n","y = torch.tensor(y,dtype = torch.int64)"],"metadata":{"id":"kvQ7DojN-IJZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = nn.Linear(x.size()[1],10)"],"metadata":{"id":"NwIVXSO0-hpD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss_fn = nn.CrossEntropyLoss()"],"metadata":{"id":"G6JHaHd8NlxF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["optimizer = optim.SGD(model.parameters(),lr = 0.01)"],"metadata":{"id":"-gFfzwKY-kSu","executionInfo":{"status":"error","timestamp":1669536365768,"user_tz":-540,"elapsed":276,"user":{"displayName":"rany go","userId":"15846384859939162308"}},"colab":{"base_uri":"https://localhost:8080/","height":170},"outputId":"2b7bfb97-5728-4fef-fd20-700a0b556b84"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-e8e2b013d522>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0moptimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moptim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSGD\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.01\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'optim' is not defined"]}]},{"cell_type":"code","source":["losses = [] \n","for epoch in range(100) :\n","    pred = model(x)\n","    loss = loss_fn(pred,y) \n","    loss.backward()\n","    optimizer.step()\n","    optimizer.zero_grad()\n","    losses.append(loss.item())"],"metadata":{"id":"HtW1KpKk-uo2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.plot(losses)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"UTxYrH3mQFRp","executionInfo":{"status":"ok","timestamp":1669488241904,"user_tz":-540,"elapsed":4,"user":{"displayName":"rany go","userId":"15846384859939162308"}},"outputId":"b77642bb-0305-4788-d7bd-3087f0e85cb6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f62bdfb8cd0>]"]},"metadata":{},"execution_count":60},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# DataLoader 활용하기"],"metadata":{"id":"2gr6jwcwUy5W"}},{"cell_type":"code","source":["import torch\n","from torch import nn,optim"],"metadata":{"id":"l9wAO8j0P56o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from torch.utils.data import TensorDataset, DataLoader"],"metadata":{"id":"qTigEeCSNrHn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ds = TensorDataset(X,y)"],"metadata":{"id":"Vw-LBPawNraq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i832StS8g1zx","executionInfo":{"status":"ok","timestamp":1669542929621,"user_tz":-540,"elapsed":309,"user":{"displayName":"rany go","userId":"15846384859939162308"}},"outputId":"4c9da119-d7cc-4ec3-95f8-47e3129661a7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch.utils.data.dataset.TensorDataset at 0x7fa6442df490>"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["loader = DataLoader(ds,batch_size = 64 , shuffle = True )"],"metadata":{"id":"Nr0z8UZlNrgy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["net = nn.Sequential(nn.Linear(64,10))"],"metadata":{"id":"vMXSuQAbNrl2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss_fn = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(net.parameters())\n","losses = []\n","for epoch in range(10) : \n","    running_loss = 0.0\n","    for xx , yy in loader : \n","        y_pred = net(xx) \n","        loss = loss_fn(y_pred,yy)\n","        loss.backward()\n","        optimizer.step()\n","        optimizer.zero_grad()\n","        running_loss += loss.item()\n","    losses.append(running_loss)"],"metadata":{"id":"qRpWBa52S0sU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Dropout 사용한 정규화"],"metadata":{"id":"KrfxtLDhSyoq"}},{"cell_type":"code","source":["import torch\n","from torch import nn, optim"],"metadata":{"id":"1ANm5uKpNrrE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X = digit.data"],"metadata":{"id":"qXbx-EROUsCa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"AJU-j4IcVV5G"},"execution_count":null,"outputs":[]}]}